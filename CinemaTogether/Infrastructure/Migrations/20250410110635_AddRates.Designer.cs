// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250410110635_AddRates")]
    partial class AddRates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Iso2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.EmailVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationTokens");
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApiId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("048291de-5df2-43cb-9b59-ddcc7ba2f3d4"),
                            ApiId = 28,
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("1b33dcf2-e1ad-4a02-bd6a-9b874d6369cd"),
                            ApiId = 12,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("27f6e407-e3d5-4b34-a713-a4da1a661604"),
                            ApiId = 16,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = new Guid("cd4ab5ce-61e7-4c0e-8cb1-c527250375ca"),
                            ApiId = 35,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("99116751-059a-4c22-8981-7479b7fb0e0e"),
                            ApiId = 80,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = new Guid("881dbfa8-5503-47cb-9545-dd2ebc94e850"),
                            ApiId = 99,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("ad48a3ca-bf42-4dcf-896a-d2a0934297be"),
                            ApiId = 18,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("44d1426b-e51b-4605-ada6-5eb5d868c357"),
                            ApiId = 10751,
                            Name = "Family"
                        },
                        new
                        {
                            Id = new Guid("2ac7342a-f220-479e-9a7b-18afada9fbbe"),
                            ApiId = 14,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("0bd2dcfd-0cfa-4449-929f-748c399c8dbf"),
                            ApiId = 36,
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("3489587e-6fa3-4790-8216-be5bbb3532bc"),
                            ApiId = 27,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("a4cd390f-39fd-462d-9b9e-7ff3640f7135"),
                            ApiId = 10402,
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("c3007078-1f8c-4f34-9986-0be2cb6e6306"),
                            ApiId = 9648,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("1cb76074-a2e9-4e50-bb64-165c93533598"),
                            ApiId = 10749,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("3af9901c-a0cc-44c4-928b-e478617f9ff1"),
                            ApiId = 878,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = new Guid("45998a9a-0a9c-4986-9e0f-05faeb3b5932"),
                            ApiId = 10770,
                            Name = "TV Movie"
                        },
                        new
                        {
                            Id = new Guid("f015ce95-992a-4197-b86c-de5599ebbc98"),
                            ApiId = 53,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("b504bd64-5df9-4546-b7e4-ffad637318be"),
                            ApiId = 10752,
                            Name = "War"
                        },
                        new
                        {
                            Id = new Guid("ba415ac9-bc10-4652-99a1-fbf6e92beb4b"),
                            ApiId = 37,
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Actors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<decimal>("RatingTmdb")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Domain.Entities.MovieGenre", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("Domain.Entities.MovieUserRate", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MovieId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("MovieId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("MovieUserRates");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Rating")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0440a78-41cc-419c-b05f-b511ee65d28a"),
                            DateOfBirth = new DateTime(2000, 4, 10, 13, 6, 34, 461, DateTimeKind.Local).AddTicks(740),
                            Email = "d.krumkachev@gmail.com",
                            Gender = 1,
                            IsEmailVerified = true,
                            Name = "Robby Krieger",
                            PasswordHash = "CE2793EAB65C92EAAA3E7CC0C9CE670CAE6475E6524BD0A0B17864D5A8469315FD877C0D9D206996E56E025236792F88",
                            Rating = 0m,
                            RatingCount = 0,
                            Role = 1,
                            TwoFactorEnabled = false,
                            Username = "Test1"
                        },
                        new
                        {
                            Id = new Guid("ddc7d332-e194-4e6e-a77d-c1ebce29e746"),
                            DateOfBirth = new DateTime(2002, 4, 10, 13, 6, 34, 466, DateTimeKind.Local).AddTicks(4043),
                            Email = "artemij1258@gmail.com",
                            Gender = 1,
                            IsEmailVerified = true,
                            Name = "John Densmore",
                            PasswordHash = "01C4CDFAE39C72DB61DD80F1191E992D2EC39DF4732180E23ED3AFD753FA42CD9B15541EB00603827E84EE3D11B03279",
                            Rating = 0m,
                            RatingCount = 0,
                            Role = 0,
                            TwoFactorEnabled = false,
                            Username = "Test2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserFriend", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.EmailVerificationToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.MovieGenre", b =>
                {
                    b.HasOne("Domain.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.MovieUserRate", b =>
                {
                    b.HasOne("Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId1");

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("MovieUserRates")
                        .HasForeignKey("UserId1");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.UserFriend", b =>
                {
                    b.HasOne("Domain.Entities.User", "Friend")
                        .WithMany("FriendOf")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("FriendOf");

                    b.Navigation("Friends");

                    b.Navigation("MovieUserRates");
                });
#pragma warning restore 612, 618
        }
    }
}
